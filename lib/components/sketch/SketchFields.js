'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SketchFields = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactcss = require('reactcss');

var _reactcss2 = _interopRequireDefault(_reactcss);

var _color = require('../../helpers/color');

var _color2 = _interopRequireDefault(_color);

var _common = require('../common');

var _PhotoshopColorNames = require('../photoshop/PhotoshopColorNames');

var _PhotoshopColorNames2 = _interopRequireDefault(_PhotoshopColorNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // Generated by CoffeeScript 0.1.6
/* eslint-disable no-param-reassign */


var SketchFields = exports.SketchFields = function SketchFields(_ref) {
  var _React$createElement;

  var onChange = _ref.onChange,
      rgb = _ref.rgb,
      hsl = _ref.hsl,
      hsv = _ref.hsv,
      hex = _ref.hex,
      disableAlpha = _ref.disableAlpha,
      colorNames = _ref.colorNames;

  var alpha, double, fields, handleChange, input, label, single, triple;

  var _reactCSS = (0, _reactcss2.default)({
    default: {
      fields: {
        display: 'flex',
        paddingTop: '4px'
      },
      single: {
        flex: '1',
        paddingLeft: '6px'
      },
      alpha: {
        flex: '1',
        paddingLeft: '6px'
      },
      double: {
        flex: '2'
      },
      triple: {
        flex: '3'
      },
      input: {
        width: '80%',
        padding: '4px 10% 3px',
        border: 'none',
        boxShadow: 'inset 0 0 0 1px #ccc',
        fontSize: '11px'
      },
      label: {
        display: 'block',
        textAlign: 'center',
        fontSize: '11px',
        color: '#222',
        paddingTop: '3px',
        paddingBottom: '4px',
        textTransform: 'capitalize'
      }
    },
    disableAlpha: {
      alpha: {
        display: 'none'
      }
    }
  }, { disableAlpha: disableAlpha });

  fields = _reactCSS.fields;
  single = _reactCSS.single;
  alpha = _reactCSS.alpha;
  double = _reactCSS.double;
  triple = _reactCSS.triple;
  input = _reactCSS.input;
  label = _reactCSS.label;

  handleChange = function handleChange(_ref2, e) {
    var hex = _ref2.hex,
        r = _ref2.r,
        g = _ref2.g,
        b = _ref2.b,
        a = _ref2.a,
        h = _ref2.h,
        s = _ref2.s,
        v = _ref2.v;

    if (hex) {
      if (!_color2.default.isValidHex(hex)) {
        return;
      }
      return onChange({
        hex: hex,
        source: 'hex'
      }, e);
    } else if (r || g || b) {
      return onChange({
        r: r != null ? r : rgb.r,
        g: g != null ? g : rgb.g,
        b: b != null ? b : rgb.b,
        a: rgb.a,
        source: 'rgb'
      }, e);
    } else if (a) {
      if (a < 0) {
        a = 0;
      }
      if (a > 100) {
        a = 100;
      }
      a = a / 100;
      return onChange({
        h: hsv.h,
        s: hsv.s * 100,
        v: hsv.v * 100,
        a: a,
        source: 'rgb'
      }, e);
    } else if (h || s || v) {
      return onChange({
        h: h != null ? h : hsv.h,
        s: s != null ? s : hsv.s * 100,
        v: v != null ? v : hsv.v * 100,
        a: hsv.a,
        source: 'hsv'
      }, e);
    }
  };
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { className: 'flexbox-fix', style: fields },
      _react2.default.createElement(
        'div',
        { style: double },
        _react2.default.createElement(_common.EditableInput, { label: 'hex', value: hex.replace('#', ''), onChange: handleChange, style: { input: input, label: label } })
      ),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, { label: 'r', value: rgb.r, onChange: handleChange, dragLabel: 'true', dragMax: '255', style: { input: input, label: label } })
      ),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, { label: 'g', value: rgb.g, onChange: handleChange, dragLabel: 'true', dragMax: '255', style: { input: input, label: label } })
      ),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, { label: 'b', value: rgb.b, onChange: handleChange, dragLabel: 'true', dragMax: '255', style: { input: input, label: label } })
      ),
      _react2.default.createElement(
        'div',
        { style: alpha },
        _react2.default.createElement(_common.EditableInput, { label: 'a', value: Math.round(rgb.a * 100), onChange: handleChange, dragLabel: 'true', dragMax: '100', style: { input: input, label: label } })
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'flexbox-fix', style: fields },
      _react2.default.createElement('div', { style: double }),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, { label: 'h', value: hsv.h, onChange: handleChange, dragLabel: 'true', dragMax: '255', style: { input: input, label: label } })
      ),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, (_React$createElement = { label: 's', value: hsv.s }, _defineProperty(_React$createElement, 'value', Math.round(hsv.s * 100)), _defineProperty(_React$createElement, 'onChange', handleChange), _defineProperty(_React$createElement, 'dragLabel', 'true'), _defineProperty(_React$createElement, 'dragMax', '255'), _defineProperty(_React$createElement, 'style', { input: input, label: label }), _React$createElement))
      ),
      _react2.default.createElement(
        'div',
        { style: single },
        _react2.default.createElement(_common.EditableInput, { label: 'v', value: Math.round(hsv.v * 100), onChange: handleChange, dragLabel: 'true', dragMax: '255', style: { input: input, label: label } })
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'flexbox-fix', style: fields },
      _react2.default.createElement(
        'div',
        { style: triple },
        _react2.default.createElement(_PhotoshopColorNames2.default, { onChange: handleChange, colorNames: colorNames, hex: !(rgb.a < 1) ? hex : void 0 })
      )
    )
  );
};

exports.default = SketchFields;